#!/bin/bash
# Simple helper which renames files but also checks _scans.tsv file
# for possibly needed renaming and then triple checks that git
# doesn't have any memory of the old file left.
# Restrictions:
#  must be within the same folder
# To swap two files names you can do smth like:
#  f1=sub-0001_ses-03_task-alignvideo_acq-mb8_run-01_bold.nii.gz; f2=sub-0001_ses-03_task-alignvideo_acq-mb8_run-02_bold.nii.gz; \
#	../../../code/rename_file "$f1" CRAP; ../../../code/rename_file "$f2" "$f1"; ../../../code/rename_file CRAP "$f2";


set -eu

function error() {
    echo "ERROR: $@" >&2
    exit 1
}

function basefolder() {
    if hash grealpath 2>/dev/null; then
        # on OSX
        REALPATH=grealpath
    else
        REALPATH=realpath
    fi
    "$REALPATH" --no-symlinks "$1" | xargs dirname
}

# Initialize variables for flags
swap=
all_extensions=
dry_run=

# Parse options
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        --swap) swap=true; shift ;;
        --all-extensions) all_extensions=true; shift ;;
		--dry-run) dry_run=true; shift ;;
        --) shift; break ;;
        -*) echo "Unknown option: $1" >&2; exit 1 ;;
        *) break ;;
    esac
done

# Check if the required positional arguments are provided
if [[ "$#" -lt 2 ]]; then
    error "Usage: $0 [--swap] [--all-extensions] [--dry-run] <from> <to>"
    exit 1
fi

# Print the values for debugging
echo "fr: $1"
echo "to: $2"
echo "swap: $swap"
echo "all_extensions: $all_extensions"
echo "dry_run: $dry_run"


function rename_one_file() {
    fr="$1"
    to="$2"

    frd=$(basefolder "$fr")
    tod=$(basefolder "$to")

    if [ "$frd" != "$tod" ] ; then
        error "both paths must remain in the same directory. Got $frd != $tod"
    fi

    sesdir="$frd/.."

    # if [ ! -e "$fr" ]; then
    #   error "$fr doesn't exist"
    # fi

    if [ -n "$dry_run" ] ; then
        echo DRY: mv "$fr" "$to"
        return
    fi

    if [ -e "$to" ]; then
        error "$to already exists!"
    fi

    sed_rule="s,/$(basename $fr)\>,/$(basename $to),g"

    scans_file=$(/bin/ls -1 $frd/../*_scans.tsv 2>/dev/null || :)
    if [ -n "$scans_file" ]; then
        # ensure we have all needed files
        datalad get "$scans_file"
        #echo "ERROR: we want our scans_file under $frd/.."
        #exit 1
        echo "Need to replace in $scans_file"
        [ ! -s "$scans_file" ] || git annex unlock "$scans_file"
        sed -i "" -e "$sed_rule" "$scans_file"
	#sed -i "$sed_rule" "$scans_file"
        git annex add "$scans_file"
    fi
    fmap_folder=$(/bin/ls -d1 $frd/../fmap 2>/dev/null || :)
    if [ -e "$fmap_folder" ]; then
        echo "Potentially fixing fieldmap side car files"
        # doing lazy way for now -- just ignore if error. TODO: make it robust etc
        git annex unlock "$fmap_folder"/*.json || :
        sed -i "" -e "$sed_rule" "$fmap_folder"/*.json
	#sed -i "$sed_rule" "$fmap_folder"/*.json
        git annex add "$fmap_folder"/*.json
    fi

    git mv "$fr" "$to"
}


function rename_maybe_with_extensions() {
    if [ -z "$all_extensions" ]; then
        rename_one_file "$1" "$2"
    else
        # Figure out set of extensions to go through based on the first file
        ext1=${1#*.}
        ext2=${2#*.}
        if [ -z "$ext1" ] || [ "$ext1" != "$ext2" ]; then
            error "for --all-extensions extensions must be the same and non-degenerate. Got '$ext1' and '$ext2'"
        fi
        base1=${1%$ext1}
        base2=${2%$ext1}
        /bin/ls -1 ${base1}* | while read f1; do
            ext=${f1#*.}
            rename_one_file "$f1" "$base2$ext"
        done
    fi
}

if [ -z "$swap" ]; then
    rename_maybe_with_extensions "$1" "$2"
else
    # just do through a temporary side file
    tempfile="$(dirname "$2")/SWAPNAME-$(basename "$2")"
    rename_maybe_with_extensions "$1" "$tempfile"
    rename_maybe_with_extensions "$2" "$1"
    rename_maybe_with_extensions "$tempfile" "$2"
fi
