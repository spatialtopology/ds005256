#!/usr/bin/env python

import os
import sys
from glob import glob
from heudiconv.utils import load_json, save_json

def check_and_update_json(json_file):
    data = load_json(json_file)
    intended_for_list = data.get("IntendedFor", [])

    if not isinstance(intended_for_list, list):
        print(f"Error: 'IntendedFor' field in {json_file} is not a list")
        return

    updated_list = [
        path 
        for path in intended_for_list 
        if os.path.lexists(os.path.join(os.path.dirname(json_file), '..', '..', path))
    ]
    removed = set(intended_for_list).difference(updated_list)
    if removed:
        data["IntendedFor"] = updated_list
        save_json(json_file, data, pretty=True)
        print(f"{json_file} - removed {len(removed)} invalid paths: {removed}")
        non_dups = [f for f in removed if "__dup" not in f]
        if non_dups:
            print(f"  ! {len(non_dups)} were non __dups: {non_dups}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python script.py <json_file1> <json_file2> ...")
        sys.exit(1)

    json_files = sys.argv[1:]
    if len(json_files) == 1 and '*' in json_files[0]:
        print("Assuming that we were passed in a glob")
        json_files = glob(json_files[0])

    for json_file in json_files:
        if os.path.isfile(json_file):
            check_and_update_json(json_file)
        else:
            print(f"File not found: {json_file}")
